// Jednoduch√Ω skript na testovanie API endpointov
import fetch from 'node-fetch';

try {
  // Sk√∫sime obe porty, na ktor√Ωch by mohol server be≈æa≈•
  const API_URLS = [
    'http://localhost:5000/api', 
    'http://localhost:3000/api'
  ];

  console.log(`Testovanie API na adres√°ch: ${API_URLS.join(', ')}`);
  console.log('Debug: ≈†tart testovania...');

  // Funkcia na otestovanie dostupnosti servera
  async function checkServerAvailability() {
    for (const baseUrl of API_URLS) {
      try {
        console.log(`Sk√∫≈°am server na: ${baseUrl}/test`);
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 3000);
        const response = await fetch(`${baseUrl}/test`, { signal: controller.signal });
        clearTimeout(timeout);
        
        if (response.ok) {
          console.log(`‚úÖ Server je dostupn√Ω na: ${baseUrl}`);
          return baseUrl;
        }
      } catch (error) {
        console.log(`‚ùå Server nie je dostupn√Ω na: ${baseUrl} - ${error.message}`);
      }
    }
    return null;
  }

  async function testLogin(apiUrl) {
    try {
      console.log('\nüîí TEST PRIHL√ÅSENIA');
      console.log('Posielam po≈æiadavku na:', `${apiUrl}/auth/login`);
      console.log('√ödaje pre prihl√°senie:', { 
        email: 'test@example.com', 
        password: 'password123' 
      });
      
      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 10000);
      
      const response = await fetch(`${apiUrl}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123'
        }),
        signal: controller.signal
      });
      
      clearTimeout(timeout);
      
      console.log('Status:', response.status);
      console.log('Status Text:', response.statusText);
      
      // Log full response headers
      const headers = {};
      response.headers.forEach((value, name) => {
        headers[name] = value;
      });
      console.log('Response Headers:', headers);
      
      const responseText = await response.text();
      console.log('Raw Response Text:', responseText);
      
      let data;
      try {
        data = JSON.parse(responseText);
        console.log('Parsed Response:', data);
      } catch (parseError) {
        console.error('Chyba pri parsovan√≠ JSON:', parseError);
      }
      
      if (response.ok) {
        console.log('‚úÖ Prihl√°senie √∫spe≈°n√©!');
        return data.token;
      } else {
        console.error('‚ùå Prihl√°senie zlyhalo.');
        return null;
      }
    } catch (error) {
      console.error('Chyba pri prihl√°sen√≠:', error.message || error.toString());
      console.error('Stack:', error.stack);
      if (error.code) {
        console.error('Error code:', error.code);
      }
      if (error.code === 'ECONNREFUSED') {
        console.error('Server nie je dostupn√Ω na adrese: ' + apiUrl);
      }
      return null;
    }
  }

  // Funkcia na testovanie registr√°cie (pre vytvorenie pou≈æ√≠vateƒæa)
  async function testRegister(apiUrl) {
    try {
      console.log('\nüìù TEST REGISTR√ÅCIE');
      console.log('Posielam po≈æiadavku na:', `${apiUrl}/auth/register`);
      
      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 10000);
      
      console.log('Registrovan√© √∫daje:', { 
        name: 'Test User', 
        email: 'test@example.com', 
        password: 'password123' 
      });
      
      const response = await fetch(`${apiUrl}/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: 'Test User',
          email: 'test@example.com',
          password: 'password123'
        }),
        signal: controller.signal
      });
      
      clearTimeout(timeout);
      console.log('Status:', response.status);
      console.log('Status Text:', response.statusText);
      
      const responseText = await response.text();
      console.log('Raw Response Text:', responseText);
      
      let data;
      try {
        data = JSON.parse(responseText);
        console.log('Parsed Response:', data);
      } catch (parseError) {
        console.error('Chyba pri parsovan√≠ JSON:', parseError);
      }
      
      if (response.ok) {
        console.log('‚úÖ Registr√°cia √∫spe≈°n√°!');
        return data.token;
      } else {
        console.error('‚ùå Registr√°cia zlyhala.');
        return null;
      }
    } catch (error) {
      console.error('Chyba pri registr√°cii:', error.message || error.toString());
      console.error('Stack:', error.stack);
      if (error.code) {
        console.error('Error code:', error.code);
      }
      return null;
    }
  }

  // Spusti≈• testy
  async function runTests() {
    try {
      console.log('Debug: Zaƒç√≠nam testy...');
      
      // Najprv zist√≠me, na ktorom porte je server dostupn√Ω
      const apiUrl = await checkServerAvailability();
      
      if (!apiUrl) {
        console.error('‚ùå Server nie je dostupn√Ω na ≈æiadnej z adries:', API_URLS.join(', '));
        console.error('Skontrolujte, ƒçi server be≈æ√≠ a je spr√°vne nakonfigurovan√Ω.');
        return;
      }

      // Sk√∫sime najprv login
      console.log('\nüîç Sk√∫≈°am prihl√°senie...');
      let token = await testLogin(apiUrl);
      
      // Ak login zlyh√°, sk√∫sime registr√°ciu a potom znovu login
      if (!token) {
        console.log('\nüîç Login zlyhal, sk√∫≈°am registr√°ciu a potom login znovu...');
        await testRegister(apiUrl);
        token = await testLogin(apiUrl);
      }
      
      if (token) {
        console.log('\n‚úÖ √öspe≈°ne prihl√°sen√Ω s tokenom:', token);
      } else {
        console.error('\n‚ùå Nepodarilo sa prihl√°si≈• ani po registr√°cii.');
      }
      
      console.log('Debug: Testy dokonƒçen√©');
    } catch (error) {
      console.error('Chyba pri testovan√≠ API:', error);
    }
  }

  console.log('Debug: Sp√∫≈°≈•anie testov...');
  // Manually wait for runTests to complete
  runTests().then(() => {
    console.log('V≈°etky testy dokonƒçen√©');
  }).catch((error) => {
    console.error('Hlavn√° chyba:', error);
  });

} catch (error) {
  console.error('Glob√°lna chyba v skripte:', error);
}